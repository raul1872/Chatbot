import EventEmitter from 'node:events';
import type polka from 'polka';
import type Queue from 'queue-promise';

import type { Message } from '~/types';
/**
 * Class representing MetaCoreVendor, a vendor class for meta core functionality.
 * @extends EventEmitter
 */
export declare class MetaCoreVendor extends EventEmitter {
    queue: Queue;
    /**
     * Create a MetaCoreVendor.
     * @param {Queue} _queue - The queue instance.
     */
    constructor(_queue: Queue);
    /**
     * Middleware function for indexing home.
     * @type {polka.Middleware}
     */
    indexHome: polka.Middleware;
    /**
     * Check if the token is valid.
     * @param {string} mode - The mode parameter.
     * @param {string} token - The token parameter.
     * @param {string} originToken - The origin token parameter.
     * @returns {boolean} Returns true if token is valid, false otherwise.
     */
    tokenIsValid(mode: string, token: string, originToken: string): boolean;
    private extractStatus;
    /**
     * Middleware function for verifying token.
     * @type {polka.Middleware}
     */
    verifyToken: polka.Middleware;
    /**
     * Middleware function for handling incoming messages.
     * @type {polka.Middleware}
     */
    incomingMsg: polka.Middleware;
    /**
     * Process incoming message.
     * @param {Message} message - The message object.
     * @returns {Promise<void>} Promise that resolves when processing is complete.
     */
    processMessage: (message: Message) => Promise<void>;
}
//# sourceMappingURL=core.d.ts.map