import { ProviderClass } from '@builderbot/bot';
import type { Vendor } from '@builderbot/bot/dist/provider/interface/provider';
import type { BotContext, Button, SendOptions } from '@builderbot/bot/dist/types';
import Queue from 'queue-promise';

import type { MetaInterface } from '~/interface/meta';
import type { MetaGlobalVendorArgs, Localization, Message, MetaList, ParsedContact, Reaction, SaveFileOptions, TextMessageBody } from '~/types';
declare class MetaProvider extends ProviderClass<MetaInterface> implements MetaInterface {
    vendor: Vendor<any>;
    queue: Queue;
    globalVendorArgs: MetaGlobalVendorArgs;
    prefixMap: {
        '549': string;
        '521': string;
    };
    constructor(args: MetaGlobalVendorArgs);
    protected beforeHttpServerInit(): void;
    protected afterHttpServerInit(): Promise<void>;
    protected initVendor(): Promise<any>;
    protected fixPrefixMetaNumber: (phoneNumber: string) => string;
    /**
     *
     * @param ctx
     * @param options
     * @returns
     */
    saveFile: (ctx: Partial<Message & BotContext>, options?: SaveFileOptions) => Promise<string>;
    saveBuffer: (ctx: Partial<Message & BotContext>, options?: SaveFileOptions) => Promise<Buffer>;
    busEvents: () => {
        event: string;
        func: (payload: any) => void;
    }[];
    sendImage: (to: string, mediaInput: any, caption: string) => Promise<void>;
    sendImageUrl: (to: string, url: string, caption?: string) => Promise<void>;
    sendVideo: (to: string, pathVideo: any, caption: string) => Promise<void>;
    sendVideoUrl: (to: string, url: string, caption?: string) => Promise<void>;
    sendMedia: (to: string, text: string, mediaInput: string) => Promise<void>;
    sendList: (to: string, list: MetaList) => Promise<void>;
    sendListComplete: (to: string, header: string, text: string, footer: string, button: string, list: Record<string, any>) => Promise<void>;
    sendButtons: (to: string, buttons: Button[], text: string) => Promise<void>;
    sendButtonUrl: (to: string, button: Button & {
        url: string;
    }, text: string) => Promise<any>;
    sendButtonsMedia: (to: string, media_type: string, buttons: any[], text: string, url: string) => Promise<void>;
    sendTemplate: (to: string, template: string, languageCode: string, components?: any[]) => Promise<void>;
    sendFlow: (to: string, headerText: string, bodyText: string, footerText: string, flowID: string, flowCta: string, screenName: string, data: Record<string, any>) => Promise<void>;
    sendContacts: (to: string, contacts?: ParsedContact[]) => Promise<void>;
    sendCatalog: (to: string, text: string, itemCatalogId: string) => Promise<void>;
    sendMessage: (to: string, message: string, options?: SendOptions) => Promise<any>;
    sendFile: (to: string, mediaInput: any, caption: string) => Promise<void>;
    sendAudio: (to: string, pathVideo?: any) => Promise<void>;
    sendReaction: (to: string, react: Reaction) => Promise<void>;
    requestLocation: (to: any, bodyText: any) => Promise<void>;
    sendLocation: (to: string, localization: Localization) => Promise<void>;
    sendLocationRequest: (to: string, bodyText: string) => Promise<void>;
    sendText: (to: string, message: string) => Promise<void>;
    sendMessageMeta: (body: TextMessageBody) => void;
    sendMessageToApi: (body: TextMessageBody) => Promise<any>;
}
export { MetaProvider };
//# sourceMappingURL=provider.d.ts.map